// Generated by gencpp from file baihong_zeng_roslab/scan_range.msg
// DO NOT EDIT!


#ifndef BAIHONG_ZENG_ROSLAB_MESSAGE_SCAN_RANGE_H
#define BAIHONG_ZENG_ROSLAB_MESSAGE_SCAN_RANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace baihong_zeng_roslab
{
template <class ContainerAllocator>
struct scan_range_
{
  typedef scan_range_<ContainerAllocator> Type;

  scan_range_()
    : minimum_value(0.0)
    , maximum_value(0.0)  {
    }
  scan_range_(const ContainerAllocator& _alloc)
    : minimum_value(0.0)
    , maximum_value(0.0)  {
  (void)_alloc;
    }



   typedef float _minimum_value_type;
  _minimum_value_type minimum_value;

   typedef float _maximum_value_type;
  _maximum_value_type maximum_value;





  typedef boost::shared_ptr< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> const> ConstPtr;

}; // struct scan_range_

typedef ::baihong_zeng_roslab::scan_range_<std::allocator<void> > scan_range;

typedef boost::shared_ptr< ::baihong_zeng_roslab::scan_range > scan_rangePtr;
typedef boost::shared_ptr< ::baihong_zeng_roslab::scan_range const> scan_rangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baihong_zeng_roslab::scan_range_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace baihong_zeng_roslab

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'baihong_zeng_roslab': ['/home/baihong/baihong_ws/src/baihong_zeng_roslab/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9f96e798b6a8bc7c7805b543c5dd8c3";
  }

  static const char* value(const ::baihong_zeng_roslab::scan_range_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9f96e798b6a8bc7ULL;
  static const uint64_t static_value2 = 0xc7805b543c5dd8c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baihong_zeng_roslab/scan_range";
  }

  static const char* value(const ::baihong_zeng_roslab::scan_range_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 minimum_value\n\
float32 maximum_value\n\
";
  }

  static const char* value(const ::baihong_zeng_roslab::scan_range_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.minimum_value);
      stream.next(m.maximum_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct scan_range_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baihong_zeng_roslab::scan_range_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baihong_zeng_roslab::scan_range_<ContainerAllocator>& v)
  {
    s << indent << "minimum_value: ";
    Printer<float>::stream(s, indent + "  ", v.minimum_value);
    s << indent << "maximum_value: ";
    Printer<float>::stream(s, indent + "  ", v.maximum_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAIHONG_ZENG_ROSLAB_MESSAGE_SCAN_RANGE_H
